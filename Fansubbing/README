fansub_utils.py - Batch processing scripts for fansubbing
=========================================================

Script is designed to be ran inside of a folder containing .mkv files.

For further documentation and help, run any command with `--help`:
    i.e. $ python fansub_utils.py --help
         $ python fansub_utils.py diff --help
         $ python fansub_utils.py renamer cleaner --help


Current batch processing functions:
    checker  Verifies CRC32 hashes in filenames.
    diff     Creates xdelta3 patches for v2 files.
    hasher   Appends CRC32 hash to filenames.
    remover  Removes CRC32 hash from filenames.
    renamer  Batch renames files.

Current utility functions:
    bitrate   Converts a desired filesize into average bitrate in kbps.
    filesize  Estimates filesize based on average bitrate in kbps.


checker
-------
Uses rhash to verify CRC32 hashes in filenames.

Usage:

    $ python fansub_utils.py checker



diff
----
Uses xdelta3 and 7-zip to create an easy distributable patch archive
containing auto-apply scripts for Windows and Linux.

Options:
    -D, --dryrun   Prints detected v2 files without creating patches.
    -W, --windows  Creates patch script for Windows users (requires xdelta3.exe
                   in folder). Disabled by default.
    -v, --verbose  Prints all operations' outputs.

Usage:

    $ python fansub_utils.py diff [OPTIONS]



hasher
------
Uses rhash to append a CRC32 hash to filenames.

Options:
    -q, --quiet    Supress output.
    -v, --verbose  Prints new filenames.

Usage:

    $ python fansub_utils.py hasher [OPTIONS]



remover
-------
Removes CRC32 hashes from filenames along with any trailing whitespace.

Options:
    -q, --quiet    Supress output.
    -v, --verbose  Prints new filenames.

Usage:

    $ python fansub_utils.py remover [OPTIONS]



renamer
-------
Batch renames files.

Usage:

    $ python fansub_utils.py renamer [OPTIONS] COMMAND [ARGS]...

Commands:
    cleaner
    ~~~~~~~
    Renames files based on unique 1-2 digit number found in original filename.
    Will find episode number from a '_#'/' #' or '_##'/' ##' sub-string in
    filename.

    Run with `--dryrun` to make sure your files have unique episode numbers.

    If group, title, src, or res isn't specified it will be prompted for.

    Options:
        -D, --dryrun         Prints new filenames without modifying them.
        -G, --group "Group"
        -T, --title "Title
        -S, --src
        -R, --res INT

    Usage:

        $ python fansub_utils.py renamer cleaner [OPTIONS]



    simple
    ~~~~~~
    Renames files from `ep##.mkv` to `[Group] Title - ## (SRC RESp).mkv`.

    If group, title, src, or res isn't specified they will be prompted for.

    Options:
        -G, --group "Group"
        -T, --title "Title"
        -S, --src
        -R, --res INT
        -q, --quiet          Supress output.
        -v, --verbose        Prints new filenames.

    Usage:

        $ python fansub_utils.py renamer simple [OPTIONS]



Utility functions
=================


bitrate
-------
Converts a desired filesize into average bitrate in kbps.

If specifying --time, you do not need to specify --frames and vice versa.
Units will be prompted for if not specified.

Examples:
    For a 950 MiB file that is 24 minutes long:
        $ python fansub_utils.py bitrate -S 950 -U mib -T 1440
        > Bitrate should be 5,534 kbps.

    For a 2 GB file that is 34720 frames long:
        $ python fansub_utils.py bitrate --size 2 -F 34720
        > Unit (TB, GB, MB, kB, TiB, GiB, MiB, KiB): gb
        > Bitrate should be 11,049 kbps.

Options:
    -S, --size FLOAT       Filesize (number only).
    -U, --unit
    -T, --time FLOAT       Time (in seconds) of clip.
    -F, --frames INTEGER   Number of frames in clip.
    -R, --framerate FLOAT  Framerate (in fps) of clip. (23.976 by default)

Usage:

    $ python fansub_utils.py bitrate [OPTIONS]



filesize
--------
Estimates filesize based on average bitrate in kbps.

Examples:
    At 7,774 kbps for 32,000 frames:
        $ python fansub_utils.py filesize -B 7774 -F 32000
        > Estimated filesize is 1.21 GiB or 1.30 GB.

    At 5,736 kbps for 24 minutes:
        $ python fansub_utils.py filesize -B 5736 -T 1440
        > Estimated filesize is 984.65 MiB or 1.03 GB.

Options:
    -B, --bitrate INTEGER  Average bitrate in kbps.
    -T, --time FLOAT       Time (in seconds) of clip.
    -F, --frames INTEGER   Number of frames in clip.
    -R, --framerate FLOAT  Framerate (in fps) of clip. (23.976 by default)

Usage:

    $ python fansub_utils.py filesize [OPTIONS]
